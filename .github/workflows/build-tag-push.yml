name: Build, Test, and Push Chirp Backend (Prod or Dev)

on:
  push:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: notification_user
          POSTGRES_PASSWORD: secretpassword
          POSTGRES_DB: notification_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U notification_user -d notification_db"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    env:
      DB_USER: notification_user
      DB_PASSWORD: secretpassword
      DB_NAME: notification_db
      DB_HOST: localhost
      DB_PORT: 5432
      PGUSER: notification_user
      PGPASSWORD: secretpassword
      PGDATABASE: notification_db
      PGHOST: localhost
      PGPORT: 5432
      DJANGO_SETTINGS_MODULE: notifications_manager.settings
      ONESIGNAL_APP_ID: dummy-id-signal-moja
      ONESIGNAL_API_KEY: dummmy-api-key-signal-moja

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache Python Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Migrations
        run: |
          python manage.py makemigrations users notifications
          python manage.py migrate

      - name: Run Tests
        run: | 
          pytest
          pytest --cov=notifications

  build-and-push:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install pack CLI
        run: |
          curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.38.2/pack-v0.38.2-linux.tgz" | tar -xz
          sudo mv pack /usr/local/bin/pack

      - name: Cache CNB Layers
        uses: actions/cache@v4
        with:
          path: ~/.cache/pack
          key: cnb-${{ runner.os }}-${{ github.ref }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            cnb-${{ runner.os }}-${{ github.ref }}
            cnb-${{ runner.os }}

      - name: Set Docker Tags
        id: tags
        run: |
          BRANCH=$(echo "${GITHUB_REF##*/}" | tr '[:upper:]' '[:lower:]' | tr '/' '-')
          SHA=$(git rev-parse --short HEAD)

          if [ "$BRANCH" = "main" ]; then
            IMAGE_TAG="prod"
            IMAGE_BASE="${{ secrets.DOCKERHUB_USERNAME }}/notifications-backend-prod"
          else
            IMAGE_TAG="dev"
            IMAGE_BASE="${{ secrets.DOCKERHUB_USERNAME }}/notifications-backend-staging"
          fi

          echo "image_base=$IMAGE_BASE" >> $GITHUB_OUTPUT
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "sha_tag=$SHA" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image with Buildpacks
        run: |
          IMAGE_BASE=${{ steps.tags.outputs.image_base }}
          IMAGE_TAG=${{ steps.tags.outputs.image_tag }}
          SHA_TAG=${{ steps.tags.outputs.sha_tag }}

          echo "ðŸ”¨ Building $IMAGE_BASE:$IMAGE_TAG and $IMAGE_BASE:$SHA_TAG"

          pack build "$IMAGE_BASE:$IMAGE_TAG" \
            --buildpack paketo-buildpacks/python \
            --builder paketobuildpacks/builder-jammy-base \
            --cache "type=build;format=volume"

          docker tag "$IMAGE_BASE:$IMAGE_TAG" "$IMAGE_BASE:$SHA_TAG"

      - name: Push Docker images to Docker Hub
        run: |
          IMAGE_BASE=${{ steps.tags.outputs.image_base }}
          IMAGE_TAG=${{ steps.tags.outputs.image_tag }}
          SHA_TAG=${{ steps.tags.outputs.sha_tag }}

          echo "ðŸš€ Pushing $IMAGE_BASE:$IMAGE_TAG"
          docker push "$IMAGE_BASE:$IMAGE_TAG"

          echo "ðŸš€ Pushing $IMAGE_BASE:$SHA_TAG"
          docker push "$IMAGE_BASE:$SHA_TAG"
